package app;

import SpikeConfig from spike.core.Config;

static class Config extends SpikeConfig {

    @if ENV == 'DEV'
    domainUrl: 'https://ac3-test.crocobet.com/ac-api/',
    @endif

    @if ENV == 'PROD'
    domainUrl: '/ac-api/',
    @endif

    apiUrl: function() { return this.domainUrl + 'rest/' },

    cookies: {
        cacheTimestamp: '_ac_ct',
        lang: '_ac_l',
        session: 'X-AC-SESSION'
    },

    languageFilePath: "i18/{lang}.json",

    html5Mode: true

}package app;

import Log from spike.core.Log;
import EventsInterface from spike.core.EventsInterface;
import Router from spike.core.Router;
import Auth from app.service.customer.Auth;

class Events extends EventsInterface {

    onRender: function(){
        Log.log('App onRender event');

        Auth.loginFromAC1();

        var viewData = Router.getViewData();

        if(viewData.routingParams.onlyForLogged && Auth.isLogged() === false){
            Router.redirect('/login');
        }

    }

}package app;

import System from spike.core.System;
import Message from spike.core.Message;
import Rest from spike.core.Rest;
import Log from spike.core.Log;
import Broadcaster from spike.core.Broadcaster;
import LoaderInterface from spike.core.LoaderInterface;

import Config from app.Config;
import Routing from app.Routing;
import Events from app.Events;

class Loader extends LoaderInterface {

    loadApplication: function(){

        System.setRouting(new Routing());
        System.setEventsInterface(new Events());

        Log.log('Load application done');

        Rest.interceptor("Request", function(response, promise){
            Log.log('Invoke Request interceptor');
        });

        Broadcaster.register('SomeEvent');

    }

}
package app;

import RoutingInterface from spike.core.RoutingInterface;

class Routing extends RoutingInterface {

    create: function(router){

        router.path('/', {
            controller: 'app.controller.home.Home',
            routingParams: {
                onlyForLogged: true
            }
        });

        router.path('/login', {
            controller: 'app.controller.login.Login'
        });

    }

}package app.controller.home;

import Controller from spike.core.Controller;
import Log from spike.core.Log;

class Home extends Controller {

    Home: function () {

    }

}package app.controller.login;

import Controller from spike.core.Controller;
import Log from spike.core.Log;
import Rest from spike.core.Rest;
import Session from app.enums.api.Session;
import Router from spike.core.Router;

class Login extends Controller {

    model: {
        loginName: '',
        password: '',
        error: true
    },

    checkErrors: function(){
        ($this.model.loginName.length === 0 || $this.model.password.length === 0) ? $this.model.error = true : $this.model.error = false;
    },

    login: function(e){
        e.preventDefault();

        if($this.model.error === true){

            Rest.post(Session.get.session, {
                loginName: $this.model.loginName,
                password: $this.model.password
            })
             .then(function () {
                 Router.redirect('/');
             })
             .catch(function () {
                 $this.model.error = true;
             });

        }

    }

}package app.element.global.navigation.footer;

import GlobalElement from spike.core.GlobalElement;
import Log from spike.core.Log;

class Footer extends GlobalElement {

    Footer: function () {

    }

}package app.element.global.navigation.menu;

import GlobalElement from spike.core.GlobalElement;
import Log from spike.core.Log;

class Menu extends GlobalElement {

    Menu: function () {

    }

}package app.enums.api;

import Config from app.Config;

enum Dictionaries {

    adminRoles: Config.apiUrl() + 'dictionaries/admin/roles',
    offerTypes: Config.apiUrl() + 'dictionaries/offer-definition/types',
    privilegeStatuses: Config.apiUrl() + 'dictionaries/privilege/statuses',
    queryStatuses: Config.apiUrl() + 'dictionaries/query/statuses',
    betSlipCombinationStatuses: Config.apiUrl() + 'dictionaries/bet-slip/combination/statuses',
    betSlipRegMethods: Config.apiUrl() + 'dictionaries/bet-slip/reg-methods',

    eventsTypes: Config.apiUrl() + 'dictionaries/events/types',
    transactionsTypes: Config.apiUrl() + 'dictionaries/transaction/types',
    transactionsTypeSwitches: Config.apiUrl() + 'dictionaries/transaction/type-switches',

    offerDefinitionStatuses: Config.apiUrl() + 'dictionaries/offer-definition/statuses',
    offerAssignConditions: Config.apiUrl() + 'dictionaries/offer-definition/assign-conditions/{offerType}',
    offerWithdrawLockTypes: Config.apiUrl() + 'dictionaries/offer-definition/withdraw-lock-types',
    offerCachbackCalculationTypes: Config.apiUrl() + 'dictionaries/offer-definition/cachback-calculation-types/{offerType}',
    offerCachbackProgressiveCachbackTypes: Config.apiUrl() + 'dictionaries/offer-definition/progressive-cachback-types',

    cmsCommentsStatuses: Config.apiUrl() + 'cms/comments/publication-statuses'

}package app.enums.api;

import Config from app.Config;

enum Privileges {

    urlIds: Config.apiUrl() + 'support/privileges/rest',

    roles: Config.apiUrl() + 'support/privileges/rest/roles',
    rolesByUrlId: Config.apiUrl() + 'support/privileges/rest/roles/{urlId}',
    createRole: Config.apiUrl() + 'support/privileges/rest/roles',
    updateRole: Config.apiUrl() + 'support/privileges/rest/roles/{urlId}',

    users: Config.apiUrl() + 'support/privileges/rest/users',
    usersByUrlId: Config.apiUrl() + 'support/privileges/rest/users/{urlId}',
    createAdminRole: Config.apiUrl() + 'support/privileges/rest/users',
    updateAdminRole: Config.apiUrl() + 'support/privileges/rest/users/{urlId}',

}package app.enums.api;

import Config from app.Config;

enum Queries {

    get: Config.apiUrl() + 'queries/{hash}',
    remove: Config.apiUrl() + 'queries/{hash}',
    getAll: Config.apiUrl() + 'queries'

}package app.enums.api;

import Config from app.Config;

enum Session {

    get: {
     session: Config.apiUrl() + 'session',
     logout: Config.apiUrl() + 'session/login',
     redirectionAC: Config.apiUrl() + 'redirections/ac-api/{path}',
    },

    post: {
     login: Config.apiUrl() + 'session/login',
     loginUsingToken: Config.apiUrl() + 'session/login/token'
    }

}package app.enums.api;

import Config from app.Config;

enum Statistics {

    exposureEstimate: Config.apiUrl() + 'statistics/exposure-estimate'

}package app.service.customer;

import Log from spike.core.Log;
import Router from spike.core.Router;
import Session from app.enums.api.Session;
import Rest from spike.core.Rest;

static class Auth {

    customerData: null,

    isLogged: function(){
        return !!this.customerData;
    },

    loginFromAC1: function(){

        var urlParams = Router.getURLParams();

        if (urlParams.token && urlParams.path && urlParams.id && urlParams.createdTime) {

          var request = {
            token: urlParams.token,
            adminId: urlParams.id,
            createdTime: urlParams.createdTime
          };

          Rest.post(Session.loginUsingToken, request)
            .then(function (response) {
              window.location.href = urlParams.path;
            });

        }

    }


}