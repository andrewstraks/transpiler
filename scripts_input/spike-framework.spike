package app;

import SpikeConfig from spike.core.Config;

static class Config extends SpikeConfig {

    @if ENV == 'DEV'
    domainUrl: 'https://test.codeoadmin.com/ac-api/',
    @endif


    @if ENV == 'PROD'
    domainUrl: '/ac-api/',
    @endif

    apiUrl: function() { return this.domainUrl + 'rest/' },
    apiUrlDemo: function() { return 'https://demo.sb-betting.com/ac-api/rest/' },

    cookies: {
        session: 'X-AC-SESSION'
    },

    languageFilePath: "i18/{lang}.json",

    html5Mode: true,

}package app;

import Log from spike.core.Log;
import EventsInterface from spike.core.EventsInterface;
import Router from spike.core.Router;
import Auth from app.service.auth.Auth;
import DictionariesManager from app.service.dictionaries.DictionariesManager;
import Broadcaster from spike.core.Broadcaster;

class Events extends EventsInterface {

    onAuth: function(){

        var isLogged = Auth.isLogged();

        if(isLogged === true){
            DictionariesManager.loadDictionaries();
        }

    },

    onReady: function(){
        Log.log('App onReady event');

        Broadcaster.register('onAuth');
        Broadcaster.listen('onAuth', this.onAuth);
        Auth.getSession();

    },

    onRender: function(){
        Log.log('App onRender event');

        var viewData = Router.getViewData();

        if(viewData.routingParams.onlyForLogged && Auth.isLogged() === false){
            Router.redirect('/login');
        }

    }

}package app;

import System from spike.core.System;
import Message from spike.core.Message;
import Rest from spike.core.Rest;
import Log from spike.core.Log;
import Broadcaster from spike.core.Broadcaster;
import LoaderInterface from spike.core.LoaderInterface;

import Config from app.Config;
import Routing from app.Routing;
import Events from app.Events;

import Xhr from app.Xhr;
import Modal from app.Modal;

class Loader extends LoaderInterface {

    loadApplication: function(){

        System.setXhrInterface(new Xhr());
        System.setRouting(new Routing());
        System.setEventsInterface(new Events());
        System.setModalInterface(new Modal());

        Log.log('Load application done');

        Rest.interceptor("Request", function(response, promise){
            Log.log('Invoke Request interceptor');
        }, true);

        Broadcaster.register('SomeEvent');

    }

}
package app;

import Log from spike.core.Log;
import ModalInterface from spike.core.ModalInterface;

class Modal extends ModalInterface {

    onRender: function (modal) {
        this.super.onRender(modal);

        modal.rootSelector().addEventListener('click', function(e){

            if(e.target.id === modal.elementId){
                modal.hide();
            }

        });

    },

    onShow: function (modal) {

        modal.rootSelector().style = '';

        setTimeout(function(){
            modal.rootSelector().classList.add('fade-in');
        }, 100);

    },

    onHide: function (modal) {
        modal.rootSelector().classList.remove('fade-in');

        setTimeout(function(){
            modal.hide();
            modal.rootSelector().style = 'display: none;'
        }, 100);

    },

    onConstruct: function(modalElement){
        modalElement.classList.add('modal-wrapper');

        return modalElement;
    },

}package app;

import RoutingInterface from spike.core.RoutingInterface;

class Routing extends RoutingInterface {

    create: function(router){

        router.path('/', {
            controller: 'app.module.home.controller.home.Home',
            routingParams: {
                onlyForLogged: true
            }
        });

        router.path('/controls', {
            controller: 'app.module.controls.controller.controls.Controls',
        });

        router.path('/login', {
           controller: 'app.module.auth.controller.login.Login',
        });

        router.path('/privileges', {
            controller: 'app.module.privileges.controller.privileges.Privileges',
        });

        router.path('/maintenance', {
            controller: 'app.module.maintenance.controller.maintenance.Maintenance',
        });

        router.path('/not-found', {
            controller: 'app.module.pageNotFound.controller.pageNotFound.PageNotFound',
        });

        router.path('/cms/:type', {
            controller: 'app.module.cms.controller.table.Table',
        });

        router.path('/cms/:type/:id', {
            controller: 'app.module.cms.controller.manager.Manager',
        });

        router.other('/not-found');
    }

}package app;

import XhrInterface from spike.core.XhrInterface;
import Auth from app.service.auth.Auth;

class Xhr extends XhrInterface {

    onCatch: function(xhr, status, thrownError){

        if(status === 401){
            Auth.logout();
        }

    }

}package app.enums.api;

import Config from app.Config;

enum Cms {

    get: {
        getPages: Config.apiUrl() + 'cms/pages',
        getPageById: Config.apiUrl() + 'cms/pages/{id}',
        getPageTypes: Config.apiUrl() + 'cms/pages/types',
        getPublishedPages: Config.apiUrl() + 'cms/pages/published',
        getPageContentById: Config.apiUrl() + 'cms/pages/{id}/content',

        getComponents: Config.apiUrl() + 'cms/components/all',
        getComponentById: Config.apiUrl() + 'cms/components/{id}',
        getComponentByHtmlTag: Config.apiUrl() + 'cms/components/{id}',

        getTemplateById: Config.apiUrl() + 'cms/pages/templates/{id}',
        getTemplates: Config.apiUrl() + 'cms/pages/templates',
        getTemplatesSimple: Config.apiUrl() + 'cms/pages/templates/simple',

        getPreviewPage: Config.apiUrl() + 'cms/pages/preview/{id}/content',

        getPageByBrand: Config.apiUrl() + 'cms/pages/custom'
    },

    post: {
        createPage: Config.apiUrl() + 'cms/pages',
        changePageTypeToPublish: Config.apiUrl() + 'cms/pages/{id}/publish',
        changePageTypeToDraft: Config.apiUrl() + 'cms/pages/{id}/draft',

        createComponent: Config.apiUrl() + 'cms/components',

        createTemplate: Config.apiUrl() + 'cms/pages/templates',

        createPreviewPage: Config.apiUrl() + 'cms/pages/preview',

        uploadFile: Config.apiUrl() + 'cms/upload'
    },

    put: {
        updatePageById: Config.apiUrl() + 'cms/pages/{id}',

        updateTemplateById: Config.apiUrl() + 'cms/pages/templates/{id}',

        updateComponentById: Config.apiUrl() + 'cms/components/{id}'
    },

    delete: {
        deletePageById: Config.apiUrl() + 'cms/pages/{id}',

        deleteComponentById: Config.apiUrl() + 'cms/components/{id}',

        deleteTemplateById: Config.apiUrl() + 'cms/pages/templates/{id}'
    }
};package app.enums.api;

import Config from app.Config;

enum Dictionaries {

    get: {

        adminRoles: Config.apiUrl() + 'dictionaries/admin/roles',
        offerTypes: Config.apiUrl() + 'dictionaries/offer-definition/types',
        privilegeStatuses: Config.apiUrl() + 'dictionaries/privilege/statuses',
        queryStatuses: Config.apiUrl() + 'dictionaries/query/statuses',
        betSlipCombinationStatuses: Config.apiUrl() + 'dictionaries/bet-slip/combination/statuses',
        betSlipRegMethods: Config.apiUrl() + 'dictionaries/bet-slip/reg-methods',

        eventsTypes: Config.apiUrl() + 'dictionaries/events/types',
        transactionsTypes: Config.apiUrl() + 'dictionaries/transaction/types',
        transactionsTypeSwitches: Config.apiUrl() + 'dictionaries/transaction/type-switches',

        offerDefinitionStatuses: Config.apiUrl() + 'dictionaries/offer-definition/statuses',
        offerAssignConditions: Config.apiUrl() + 'dictionaries/offer-definition/assign-conditions/{offerType}',
        offerWithdrawLockTypes: Config.apiUrl() + 'dictionaries/offer-definition/withdraw-lock-types',
        offerCachbackCalculationTypes: Config.apiUrl() + 'dictionaries/offer-definition/cachback-calculation-types/{offerType}',
        offerCachbackProgressiveCachbackTypes: Config.apiUrl() + 'dictionaries/offer-definition/progressive-cachback-types',

        cmsCommentsStatuses: Config.apiUrl() + 'cms/comments/publication-statuses'

    }

}package app.enums.api;

import Config from app.Config;

enum Privileges {

    get: {
        urlIds: Config.apiUrl() + 'support/privileges/rest',
        roles: Config.apiUrl() + 'support/privileges/rest/roles',
        rolesByUrlId: Config.apiUrl() + 'support/privileges/rest/roles/{urlId}',
        users: Config.apiUrl() + 'support/privileges/rest/users',
        usersByUrlId: Config.apiUrl() + 'support/privileges/rest/users/{urlId}',
    },

    put: {
         createRole: Config.apiUrl() + 'support/privileges/rest/roles',
         createAdminRole: Config.apiUrl() + 'support/privileges/rest/users',
    },

    post: {
      updateRole: Config.apiUrl() + 'support/privileges/rest/roles/{urlId}',
      updateAdminRole: Config.apiUrl() + 'support/privileges/rest/users/{urlId}',
    }

}package app.enums.api;

import Config from app.Config;

enum PrivilegesApi {

    get: {
        urlIds: Config.apiUrl() + 'support/privileges/rest',
        roles: Config.apiUrl() + 'support/privileges/rest/roles',
        rolesByUrlId: Config.apiUrl() + 'support/privileges/rest/roles/{urlId}',
        users: Config.apiUrl() + 'support/privileges/rest/users',
        usersByUrlId: Config.apiUrl() + 'support/privileges/rest/users/{urlId}',
        adminrole: Config.apiUrlDemo()+'admin-role',
        views: Config.apiUrlDemo()+'admin-role/views',
    },

    put: {
         createRole: Config.apiUrl() + 'support/privileges/rest/roles',
         createAdminRole: Config.apiUrl() + 'support/privileges/rest/users',
    },

    post: {
      updateRole: Config.apiUrl() + 'support/privileges/rest/roles/{urlId}',
      updateAdminRole: Config.apiUrl() + 'support/privileges/rest/users/{urlId}',
    }

}package app.enums.api;

import Config from app.Config;

enum Queries {

    get: {
        get: Config.apiUrl() + 'queries/{hash}',
        getAll: Config.apiUrl() + 'queries'
    },

    delete: {
        remove: Config.apiUrl() + 'queries/{hash}'
    }

}package app.enums.api;

import Config from app.Config;

enum Session {

    get: {
     menu: '/i18/menu.json',
     session: Config.apiUrl() + 'session',
     logout: Config.apiUrl() + 'session/login',
     redirectionAC: Config.apiUrl() + 'redirections/ac-api/{path}',
    },

    post: {
     login: Config.apiUrl() + 'session/login',
     loginUsingToken: Config.apiUrl() + 'session/login/token'
    }

}package app.enums.api;

import Config from app.Config;

enum Statistics {

    get: {
        exposureEstimate: Config.apiUrl() + 'statistics/exposure-estimate'
    }

}package app.enums;

import Config from app.Config;

enum TableElementTypes {


    BUTTONS: {
        header: '',
        buttons: []
    },
    BUTTON: {
        label: '',
        click: null
    },
    DATE: {
        header: '',
        format: 'dd-MM-yyyy',
    },
    SELECT: {
        arguments: {},

    },
    CHECKBOX: {

    },
    LINK: {
        href: null,
        name: '',
        target: '_self'
    },
    FILTER: {
        filter: null
    },
    INPUT: {

    }

}package app.module.auth.controller.login;

import Controller from spike.core.Controller;
import Log from spike.core.Log;
import Rest from spike.core.Rest;
import Session from app.enums.api.Session;
import Router from spike.core.Router;
import Auth from app.service.auth.Auth;

class Login extends Controller {

    model: {
        loginName: '',
        password: '',
        error: false
    },

    checkErrors: function(){
        ($this.model.loginName.length === 0 || $this.model.password.length === 0) ? $this.model.error = true : $this.model.error = false;
    },

    login: function(e){
        e.preventDefault();

        if($this.model.error === false){

            Auth.login({
                loginName: $this.model.loginName,
                password: $this.model.password
             })
             .then(function (data) {
                 Router.redirect('/');
             })
             .catch(function () {
                 $this.model.error = true;
             });

        }

    }

}package app.module.auth;

class LoginData {

    LoginData: function(adminId, allowedViews, firstName, lastName, loginName, serverTimeMillis, loginTime){
        this.adminId = adminId;
        this.allowedViews = allowedViews;
        this.firstName = firstName;
        this.lastName = lastName;
        this.loginName = loginName;
        this.serverTimeMillis = serverTimeMillis;
        this.loginTime = loginTime;
    },

    @number
    adminId: null,

    @array
    allowedViews: [],

    @string
    firstName: null,

    @string
    lastName: null,

    @string
    loginName: null,

    @number
    serverTimeMillis: null,

    @number
    loginTime: null

}package app.module.cms.common.manager;

import Controller from spike.core.Controller;

class Manager extends Controller {

    Manager: function () {
    }

}package app.module.cms.controller.custom;

import Manager from app.module.cms.common.manager.Manager;

class Custom extends Manager {

    Custom: function () {

    }

}package app.module.cms.controller.news;

import Manager from app.module.cms.common.manager.Manager;

class News extends Manager {

    News: function () {

    }

}package app.module.cms.controller.table;

import Controller from spike.core.Controller;
import Log from spike.core.Log;
import CmsService from app.service.cms.Cms;
import Utils from app.service.common.Utils;

class Table extends Controller {

    options: {
        request: CmsService.getPages,
        urlParams: {
            type: 'CUSTOM_PAGE',
            sort: 'id%2Cdesc',
            limit: 10,
            offset: 0
        },
        columns: {
            id: {
                header: 'Id',
                width: 5,
                sort: 'id,asc',
                clazz: ''
            },
            title: {
                header: 'Page Title',
                width: 10,
                sort: 'title,asc',
                clazz: 'flex-left'
            },
            type: {
                header: 'Type',
                width: 15,
                sort: 'type,asc',
                clazz: ''
            },
            creationDate: {
                header: 'Create Time',
                width: 20,
                sort: 'creationDate,asc',
                format: 'dd-MM-yyyy',
                type: 'date',
                clazz: ''
            },
            published: {
                header: 'Created by',
                width: 15,
                sort: 'publishedBy,asc',
                clazz: ''
            },
            brand: {
                header: 'Brand',
                width: 5,
                sort: 'brand,asc',
                clazz: ''
            },
            country: {
                header: 'Country',
                width: 5,
                sort: 'country,asc',
                clazz: ''
            },
            language: {
                header: 'Language',
                width: 5,
                sort: 'language,asc',
                clazz: ''
            },
            status: {
                header: 'Status',
                width: 5,
                sort: 'status,asc',
                type: 'select',
                clazz: 'flex-left',
                arguments: {
                    DRAFT: 'DRAFT',
                    PUBLISHED: 'PUBLISHED'
                },
                change: function (element, rowData, context) {

                }
            },
            visibility: {
                header: 'Visibility',
                width: 1,
                type: 'filter',
                clazz: '',
                filter: function (rowData) {
                    return (rowData.visibilityFrom ? Utils.formatDate(rowData.visibilityFrom, 'dd-MM-yyyy') : '') + ' - ' + (rowData.visibilityTo ? Utils.formatDate(rowData.visibilityTo, 'dd-MM-yyyy') : '');
                }
            },
            modification: {
                header: 'Modify',
                width: 5,
                type: 'href',
                link: function (rowData) {
                    return '/cms/custom/' + rowData.id;
                },
                target: '_self',
                clazz: ''
            },
            buttons: {
                header: 'Modify',
                width: 9,
                type: 'buttons',
                buttons: [
                    {
                        label: 'add',
                        click: function (element, rowData) {
                        }
                    },
                    {
                        label: 'delete',
                        click: function (element, rowData) {
                        }
                    }

                ]

            }

        }
    },

    Table: function () {},
}package app.module.common.element.footer;

import GlobalElement from spike.core.GlobalElement;
import Log from spike.core.Log;

class Footer extends GlobalElement {

    Footer: function () {

    }

}package app.module.common.element.menu;

import GlobalElement from spike.core.GlobalElement;
import Log from spike.core.Log;
import Rest from spike.core.Rest;
import Session from app.enums.api.Session;
import Broadcaster from spike.core.Broadcaster;

class Menu extends GlobalElement {

    menuTree: null,
    searchText: null,

    Menu: function () {

        Rest.get(Session.get.menu)
            .then(function(response){

                $this.menuTree = response;
                $this.refresh();

            });



//        Broadcaster.listen("onAuth", $this.refreshMenu);

    },

    postConstruct: function(){

    $this.refresh();

    },

    refresh: function(){

        console.log($this);

        $this.trigger("menuList", {
            menuTree: $this.menuTree
        });

    },

    search: function(e){
        e.preventDefault();

    }

}package app.module.common.element.table;

import Log from spike.core.Log;
import Element from spike.core.Element;

class Table extends Element {

    @object
    data: null,

    @map
    options: null,

    Table: function () {
    }

    postConstruct: function () {
        $this.prepareOptions();
        $this.initTableHeader();
        $this.initTableList();
        $this.initTablePagination();

        console.log($this);
    }

    prepareOptions: function(){

    }

    initTableHeader: function () {
        $this.trigger("tableHeader");
    },

    initTableList: function () {
        $this.options.request($this.options.urlParams).then(function (response) {
            $this.data = response;

            $this.trigger("tableList");

        });
    },

    initTablePagination: function () {
        $this.trigger("tablePagination");
    },

    delegateEvent: function(eventFn, element, context){
        console.log(eventFn);
        console.log(element);
        console.log(context);
    }

}package app.module.controls.controller.controls;

import Controller from spike.core.Controller;
import Log from spike.core.Log;

class Controls extends Controller {

    Controls: function () {

    },

    postConstruct: function(){

        Prism.highlightAll();

    }

}package app.module.home.controller.home;

import Controller from spike.core.Controller;
import Log from spike.core.Log;

class Home extends Controller {

    Home: function () {

    }

}package app.module.maintenance.controller.maintenance;

import Controller from spike.core.Controller;
import Log from spike.core.Log;
import DictionariesManager from app.service.dictionaries.DictionariesManager;

class Maintenance extends Controller {

    Maintenance: function () {
        $this.dictionaries = DictionariesManager.dictionaries;
    }

}package app.module.maintenance.controller.maintenance;

import Controller from spike.core.Controller;
import Log from spike.core.Log;

class PageNotFound extends Controller {

    PageNotFound: function () {

    }

}package app.module.privileges.controller.privileges;

import Controller from spike.core.Controller;
import Log from spike.core.Log;
import Rest from spike.core.Rest;
import PrivilegesApi from app.enums.api.PrivilegesApi;
import AddRoleModal from app.module.privileges.modal.addRole.AddRole;
import GeneralExcludesModal from app.module.privileges.modal.generalExcludes.GeneralExcludes;
import PagePrivilegesModal from app.module.privileges.modal.pagePrivileges.PagePrivileges;

class Privileges extends Controller {

    Privileges: function () {
        /* Wczytuje listę użytkowników */
        Rest.get(PrivilegesApi.get.adminrole)
            .then(function(response){
                var divRolesList = document.querySelector('.roles-list');

                var roles = response.items;
                var items = [];
                roles.forEach(function(val, key) {
                    var id = val.id;
                    var level = val.level;
                    var name = val.name;
                    var privileges = [];
                    items.push("<div class='form-group'><input id='role-"+id+"' name='role-"+id+"' class='form-control' type='radio' hidden/><label for='role-"+id+"' title='id: "+id+" | level: "+level+"'>"+name+"</label>"+privileges+"</div>");
                });

                var formRolesList = document.createElement('form');
                formRolesList.innerHTML = items.join("");
                divRolesList.appendChild(formRolesList);
            });


        /* Wczytuje listę przywilejów */
        Rest.get(PrivilegesApi.get.views)
            .then(function(response){
                acViews = response.items;
                var divViewsList = document.querySelector('.views-list');
                var views = response.items;
                var items = [];
                items.push('<ul class="superpowers powers-lev1">');

                //zamienić to na wyśweitlanie poziomów w pętli
                views.forEach(function(val, key) {
                    var label = val.label;
                    var children = "";
                    var grandchildren = "";

                    if (val.sublist != "null") {

                        children += "<ul class='powers-lev2'>";
                        val.sublist.forEach(function(val2, key2) {
                            var label2 = val2.label;
                            var id2 = val2.viewId;

                            if (val2.sublist != "null") {
                                grandchildren += "<ul class='powers-lev3'>";
                                val.sublist.forEach(function(val3, key3) {
                                    var label3 = val3.label;
                                    var id3 = val3.viewId;
                                    grandchildren += "<li><div class='power'><label for='canedit-"+id3+"' title='Permission to see and edit'><i class='fa fa-pencil-square-o'></i><input id='canedit-"+id3+"' type='checkbox' class='canedit'></label><label for='cansee-"+id3+"' title='Permission only to see'><i class='fa fa-eye'></i><input type='checkbox' id='cansee-"+id3+"' class='cansee'></label><span class='power-name'>"+label3+"</span><label title='More settings'><i class='fa fa-cog'></i><input type='checkbox' class='canconfig'></label></div></li>";
                                });
                                grandchildren += "</ul>";
                            }

                            children += "<li class='active'><div class='power'><label for='canedit-"+id2+"' title='Permission to see and edit'><i class='fa fa-pencil-square-o'></i><input id='canedit-"+id2+"' type='checkbox' class='canedit'></label><label for='cansee-"+id2+"' title='Permission only to see'><i class='fa fa-eye'></i><input type='checkbox' id='cansee-"+id2+"' class='cansee'></label><span class='power-name'>"+label2+"</span><label title='More settings'><i class='fa fa-cog'></i><input type='checkbox' class='canconfig'></label></div>"+grandchildren+"</li>";
                        });
                        children += "</ul>";
                    }
                    items.push("<li class='active'><div class='power'><span class='power-name'>"+label+"</span></div>"+children+"</li>");
                });
                items.push('</ul>');

                var formViewsList = document.createElement('form');
                formViewsList.innerHTML = items.join("");
                divViewsList.appendChild(formViewsList);
            });
    },


    postConstruct: function() {
        var rolesList = document.querySelector('.roles-list');
        var viewsList = document.querySelector('.views-list');

        var rolesListLabels = document.querySelectorAll('.roles-list label');



        // Odznaczanie ról na drugie kliknięcie labela
        $('.roles-list').on('click', 'label', function handler() {
            event.preventDefault();
            var radio = $(this).parent('.form-group').find('input[type="radio"]');
            if (radio.prop('checked')) {
                $('.roles-list input[type="radio"]').prop('checked', false);
            }
            else {
                $('.roles-list input[type="radio"]').prop('checked', false);
                radio.prop('checked', true);
            }
        });

        // Rozwianie widoków po kliknięciu w niebieskiego plusika
        $('.views-list').on('click', '.power:not(:only-child)', function handler() {
            var li = $(this).parent('li');
            var parents = $(this).parents('li');

            if (li.hasClass('active')) {
                    li.removeClass('active');
            } else {
                $('.superpowers li').removeClass('active');
                parents.addClass('active');
            }
        });


        // Zaznaczanie checboxów edytuj/oglądaj
        $('.views-list').on('click', 'label', function handler() {
            event.preventDefault();
            var label = $(this);
            var checkbox = label.find('input');
            var inputclass = checkbox.attr('class');
            var cansee = label.parent('div').find('input.cansee');
            var labelcansee = cansee.parent('label');
            var canedit = label.parent('div').find('input.canedit');
            var labelcanedit = canedit.parent('label');

            // gdy jest zaznaczony
            if (checkbox.prop('checked')) {
                if (inputclass == 'cansee') { // i jest okiem
                    labelcansee.removeClass('active'); labelcanedit.removeClass('active');
                    cansee.prop('checked', false); canedit.prop('checked', false);
                } else { // i jest długopisem
                    labelcanedit.removeClass('active');
                    canedit.prop('checked', false);
                }

            // gdy nie jest zaznaczony
            } else {
                if (inputclass == 'canedit') { // i jest długopisem
                    labelcanedit.addClass('active'); labelcansee.addClass('active');
                    canedit.prop('checked', true); cansee.prop('checked', true);
                } else { // i jest okiem
                    labelcansee.addClass('active');
                    cansee.prop('checked', true);
                }
            }
        });
         Log.log('AZ: Koniec!');
    },

    // Kliknięcie w przycisk otwiera modal z opcjami
    showRoleEditor: function(event){
        event.preventDefault();

        var addRoleModal = new AddRoleModal();
        addRoleModal.show();

    },

}




package app.module.privileges.modal.addRole;

import Modal from spike.core.Modal;
import Log from spike.core.Log;
import Rest from spike.core.Rest;
import PrivilegesApi from app.enums.api.PrivilegesApi;

class AddRole extends Modal {

    AddRole: function () {
        this.super();
        this.listRoles();
    },


    roles: [],
    listRoles: function(){

     Rest.get(PrivilegesApi.get.adminrole)
        .then(function(response){
            $this.roles = response.items;

            console.log($this);

        });

    },

    postConstruct: function(){

    }

}package app.module.privileges.modal.generalExcludes;

import Modal from spike.core.Modal;
import Log from spike.core.Log;

class GeneralExcludes extends Modal {

    GeneralExcludes: function () {

    }

}package app.module.privileges.modal.pagePrivileges;

import Modal from spike.core.Modal;
import Log from spike.core.Log;

class PagePrivileges extends Modal {

    PagePrivileges: function () {

    }

}package app.service.auth;

import Log from spike.core.Log;
import Router from spike.core.Router;
import Session from app.enums.api.Session;
import Rest from spike.core.Rest;
import LoginData from app.module.auth.LoginData;
import Broadcaster from spike.core.Broadcaster;
import Storage from app.service.common.Storage;

static class Auth {

    customerData: null,

    storageSessionData: 'session_data',

    isLogged: function(){
        return !!this.customerData;
    },

    saveSessionCache: function(){

        var sessionData = Storage.get($this.storageSessionData);
        if(sessionData){
            sessionData.loginTime = new Date().getTime();
        }

        Storage.set($this.storageSessionData, $this.customerData);

    },

    logout: function(){

        $this.customerData = false;
        Storage.remove($this.storageSessionData);
        Router.redirect('/login');

    },

    loginSuccess: function(response){

        $this.customerData = new LoginData(
            response.adminId,
            response.allowedViews,
            response.firstName,
            response.lastName,
            response.loginName,
            response.serverTimeMillis,
            new Date().getTime()
        );

        $this.saveSessionCache();
        Broadcaster.broadcast('onAuth');

    },

    getSession: function(){

        var sessionData = Storage.get($this.storageSessionData);
        if(sessionData && new Date().getTime() - sessionData.loginTime < 300000){
            $this.loginSuccess(sessionData);
        }else{
            Rest.get(Session.get.session).then($this.loginSuccess.bind($this));
        }

    },

    login: function(loginRequest){
      return Rest.post(Session.post.login, loginRequest).then($this.loginSuccess.bind($this));
    },

    loginFromAC1: function(){

        var urlParams = Router.getURLParams();

        if (urlParams.token && urlParams.path && urlParams.id && urlParams.createdTime) {

          var request = {
            token: urlParams.token,
            adminId: urlParams.id,
            createdTime: urlParams.createdTime
          };

          Rest.post(Session.loginUsingToken, request)
            .then(function (response) {
              window.location.href = urlParams.path;
            });

        }

    }


}package app.service.cms;

import CmsEnum from app.enums.api.Cms;
import Rest from spike.core.Rest;

static class Cms {

    getComponents: function () {
            return Rest.get(CmsEnum.get.getComponents).then(function (response) {
                return response;
            }).catch(function (err) {
                throw err;
            });
        },

        getComponentById: function (id) {
            return Rest.get(CmsEnum.get.getComponentById, {
                pathParams: {
                    id: id
                }
            }).then(function (response) {
                return response;
            }).catch(function (err) {
                throw err;
            });
        },

        getComponentByHtmlTag: function (htmlTag) {
            return Rest.get(CmsEnum.get.getComponentByHtmlTag, {
                urlParams: {
                    htmlTag: htmlTag
                }
            }).then(function (response) {
                return response;
            }).catch(function (err) {
                throw err;
            });
        },

        createComponent: function (component) {
            return Rest.get(CmsEnum.get.createComponent, component).then(function (response) {
                return response;
            }).catch(function (err) {
                throw err;
            });
        },

        updateComponentById: function (id) {
            return put(CmsEnum.put.updateComponent, $this.MODULES.COMPONENT, {
                pathParams: {
                    id: id
                }
            }).then(function (data) {
                return data;
            }).catch(function (err) {
                throw err;
            });
        },

        deleteComponentById: function (id) {
            // TO DO //
        },

        getTemplateById: function (id) {
            return Rest.get(CmsEnum.get.getTemplateById, {
                pathParams: {
                    id: id
                }
            }).then(function (response) {
                return response;
            }).catch(function (err) {
                throw err;
            });
        },

        createTemplate: function (template) {
            return Rest.post(CmsEnum.post.createTemplate, template).then(function (response) {
                return response;
            }).catch(function (err) {
                throw err;
            });
        },

        updateTemplateById: function (id, page) {
            return put(CmsEnum.put.updateTemplateById, page, {
                pathParams: {
                    id: id
                }
            }).then(function (response) {
                return response;
            }).catch(function (err) {
                throw err;
            });
        },

        getTemplates: function () {
            return Rest.get(CmsEnum.get.getTemplates).then(function (response) {
                return response;
            }).catch(function (err) {
                throw err;
            });
        },

        getSimpleTemplates: function () {
            return Rest.get(CmsEnum.get.getTemplatesSimple).then(function (response) {
                return response;
            }).catch(function (err) {
                throw err;
            });
        },

        deleteTemplateById: function (id) {
            return remove(paths.cms.DELETE.deleteTemplateById, {
                pathParams: {
                    id: id
                }
            }).then(function (response) {
                return response;
            }).catch(function (err) {
                throw err;
            });
        },

        createPage: function (page) {
            return Rest.post(CmsEnum.post.createPage, page).then(function (response) {
                return response;
            }).catch(function (err) {
                throw err;
            });
        },

        updatePageById: function (id, page) {
            return put(CmsEnum.put.updatePageById, page, {
                pathParams: {
                    id: id
                }
            }).then(function (response) {
                return response;
            }).catch(function (err) {
                throw err;
            });
        },

        getPageById: function (id) {
            return Rest.get(CmsEnum.get.getPageById, {
                pathParams: {
                    id: id
                }
            }).then(function (response) {
                return response;
            }).catch(function (err) {
                throw err;
            });
        },

        getPageTypes: function () {
            return Rest.get(CmsEnum.get.getPageTypes).then(function (response) {
                return response;
            }).catch(function (err) {
                throw err;
            });
        },

        getPublishedPages: function () {
            return Rest.get(CmsEnum.get.getPublishedPages).then(function (response) {
                return response;
            }).catch(function (err) {
                throw err;
            });
        },

        getPublishedById: function (id) {
            return Rest.get(CmsEnum.get.getPageContentById, {
                pathParams: {
                    id: id
                }
            }).then(function (response) {
                return response;
            }).catch(function (err) {
                throw err;
            });
        },

        getPages: function (urlParams) {
            return new Promise(function (resolve) {
                resolve([{
                    "id": 238,
                    "type": "CUSTOM_PAGE",
                    "status": "DRAFT",
                    "publishedBy": null,
                    "title": "test",
                    "creationDate": 1521638558509,
                    "visibilityFrom": null,
                    "visibilityTo": null,
                    "publishDate": null,
                    "brand": 1,
                    "language": "EN",
                    "country": "GH"
                }, {
                    "id": 25,
                    "type": "CUSTOM_PAGE",
                    "status": "DRAFT",
                    "publishedBy": null,
                    "title": "qwerty",
                    "creationDate": 1521721574174,
                    "visibilityFrom": null,
                    "visibilityTo": null,
                    "publishDate": null,
                    "brand": null,
                    "language": null,
                    "country": null
                }, {
                    "id": 24,
                    "type": "CUSTOM_PAGE",
                    "status": "DRAFT",
                    "publishedBy": null,
                    "title": "qwerty",
                    "creationDate": 1521715956617,
                    "visibilityFrom": null,
                    "visibilityTo": null,
                    "publishDate": null,
                    "brand": null,
                    "language": null,
                    "country": null
                }, {
                    "id": 23,
                    "type": "CUSTOM_PAGE",
                    "status": "DRAFT",
                    "publishedBy": null,
                    "title": "qwerty",
                    "creationDate": 1521715874681,
                    "visibilityFrom": null,
                    "visibilityTo": null,
                    "publishDate": null,
                    "brand": null,
                    "language": null,
                    "country": null
                }, {
                    "id": 22,
                    "type": "CUSTOM_PAGE",
                    "status": "DRAFT",
                    "publishedBy": null,
                    "title": "qwerty",
                    "creationDate": 1521715823466,
                    "visibilityFrom": null,
                    "visibilityTo": null,
                    "publishDate": null,
                    "brand": null,
                    "language": null,
                    "country": null
                }, {
                    "id": 21,
                    "type": "CUSTOM_PAGE",
                    "status": "DRAFT",
                    "publishedBy": null,
                    "title": "qwerty",
                    "creationDate": 1521715780658,
                    "visibilityFrom": null,
                    "visibilityTo": null,
                    "publishDate": null,
                    "brand": null,
                    "language": null,
                    "country": null
                }, {
                    "id": 20,
                    "type": "CUSTOM_PAGE",
                    "status": "DRAFT",
                    "publishedBy": null,
                    "title": "qwerty",
                    "creationDate": 1521715749659,
                    "visibilityFrom": 1521715749659,
                    "visibilityTo": 1521715749659,
                    "publishDate": null,
                    "brand": 2,
                    "language": null,
                    "country": "NG"
                }, {
                    "id": 19,
                    "type": "CUSTOM_PAGE",
                    "status": "DRAFT",
                    "publishedBy": null,
                    "title": "qwerty",
                    "creationDate": 1521715736346,
                    "visibilityFrom": null,
                    "visibilityTo": null,
                    "publishDate": null,
                    "brand": 2,
                    "language": "EN",
                    "country": "NG"
                }, {
                    "id": 18,
                    "type": "CUSTOM_PAGE",
                    "status": "DRAFT",
                    "publishedBy": null,
                    "title": "qwerty",
                    "creationDate": 1521715704546,
                    "visibilityFrom": null,
                    "visibilityTo": null,
                    "publishDate": null,
                    "brand": 1,
                    "language": "EN",
                    "country": "GH"
                }, {
                    "id": 17,
                    "type": "CUSTOM_PAGE",
                    "status": "DRAFT",
                    "publishedBy": null,
                    "title": "qwerty",
                    "creationDate": 1521715684257,
                    "visibilityFrom": null,
                    "visibilityTo": null,
                    "publishDate": null,
                    "brand": null,
                    "language": null,
                    "country": null
                }]);
            });
        },

        deletePageById: function (id) {

            return remove(paths.cms.DELETE.deletePageById, {
                pathParams: {
                    id: id
                }
            }).then(function (response) {
                return response;
            }).catch(function (err) {
                throw err;
            });

        },

        changeStatusToDraft: function (id) {

            return Rest.post(CmsEnum.post.changePageTypeToDraft, {
                pathParams: {
                    id: id
                }
            }).then(function (response) {
                return response;
            }).catch(function (err) {
                throw err;
            });

        }

}package app.service.common;

import Util from spike.core.Util;

static class Storage {

  set: function(paramName, paramObject){

    if(paramObject && (paramObject instanceof Array || typeof paramObject === 'object')){
      paramObject = JSON.stringify(paramObject);
    }

    localStorage.setItem(paramName, paramObject);

  },

  get: function(paramName){

    var value = localStorage.getItem(paramName);

    if(!Util.isEmpty(value)){

      value = value.trim();

      if(value[0] == '{' || value[0] == '['){
        value = JSON.parse(value);
      }else if(value == 'true'){
        value = true;
      }else if(value == 'false'){
        value = false;
      }

      return value;

    }

    return null;

  },

  remove: function(paramName){
    localStorage.removeItem(paramName);
  }

}package app.service.common;

static class Utils {

    formatDate: function (date, format, allowNumsWithoutZero) {

            if (typeof date == 'number') {
                date = new Date(date);
            }

            var minutes = (date.getMinutes() < 10 && !allowNumsWithoutZero ? '0' : '') + date.getMinutes();
            var seconds = (date.getSeconds() < 10 && !allowNumsWithoutZero ? '0' : '') + date.getSeconds();
            var hours = (date.getHours() < 10 && !allowNumsWithoutZero ? '0' : '') + date.getHours();
            var day = (date.getDate() < 10 && !allowNumsWithoutZero ? '0' : '') + date.getDate();
            var month = (date.getMonth() < 9 && !allowNumsWithoutZero ? '0' : '') + (date.getMonth() + 1);
            var year = (1900 + date.getYear());

            format = format.replace('dd', day);
            format = format.replace('MM', month);
            format = format.replace('yyyy', year);
            format = format.replace('HH', hours);
            format = format.replace('mm', minutes);
            format = format.replace('ss', seconds);

            return format;
    },


    formatNumber: function (number, format) {

        var isDecimal = format.indexOf('#.') > -1;

        if (typeof number == 'string') {
            number = parseFloat(number);
        }

        if (isDecimal) {
            var decimalPlaces = format.substring(format.indexOf('.') + 1, format.length).length;

            number = number.toFixed(decimalPlaces);

        } else {
            number = Math.round(number);
        }

        return number;

    }

}package app.service.dictionaries;

import Log from spike.core.Log;
import Rest from spike.core.Rest;
import MultiRequest from spike.core.MultiRequest;

class DictionariesLoader {

    ready: false,
    dictionariesList: [],

    DictionariesLoader: function () {
    },

    load: function(){

        var loadersList = [];

        for(var dictionaryName in $this.dictionariesList){

            if($this.dictionariesList[dictionaryName] === undefined){
                throw new Error($this.getClass()+' Dictionary path not declared');
            }

          loadersList.push(Rest.get($this.dictionariesList[dictionaryName], {
            alias: dictionaryName
          }));

        }

        return new MultiRequest(loadersList).always(function(responses){

            for(var i = 0; i < responses.length; i++){

                $this[responses[i].alias] = responses[i].responseJSON ? responses[i].responseJSON : null;

            }

        });

    }

}package app.service.dictionaries;

import Log from spike.core.Log;
import GeneralDictionaries from app.service.dictionaries.loaders.GeneralDictionaries;
import CmsDictionaries from app.service.dictionaries.loaders.CmsDictionaries;
import OffersDictionaries from app.service.dictionaries.loaders.OffersDictionaries;
import MultiRequest from spike.core.MultiRequest;
import Config from app.Config;
import Storage from app.service.common.Storage;

static class DictionariesManager {

    dictionariesLoaded: false,

    dictionaries: {
        generalDictionaries: null,
        cmsDictionaries: null,
        offersDictionaries: null
    },

    saveDictionaries: function(){

        for(var dictionaryName in $this.dictionaries){
            Storage.set('__dictionary_'+dictionaryName, $this.dictionaries[dictionaryName]);
        }

    },

    loadDictionariesFromCache: function(){

        var counter = 0;
        for(var dictionaryName in $this.dictionaries){

            var dictionaries = Storage.get('__dictionary_'+dictionaryName);
            if(dictionaries == null){
                break;
            }else{
                $this.dictionaries[dictionaryName] = dictionaries;
                counter++;
            }

        }

        if(counter === Object.keys($this.dictionaries).length){
            $this.dictionariesLoaded = true;
        }

    },

    loadDictionaries: function() {

        $this.dictionaries.generalDictionaries = new GeneralDictionaries();
        $this.dictionaries.cmsDictionaries = new CmsDictionaries();
        $this.dictionaries.offersDictionaries = new OffersDictionaries();

        $this.loadDictionariesFromCache();

        if($this.dictionariesLoaded === false){

            var loadersPromises = [
                 $this.dictionaries.generalDictionaries.load(),
                 $this.dictionaries.cmsDictionaries.load(),
                 $this.dictionaries.offersDictionaries.load()
            ];

            new MultiRequest(loadersPromises).always(function(responses){
                $this.saveDictionaries();
                $this.dictionariesLoaded = true;
            });

        }


    },

}package app.service.dictionaries.loaders;

import Log from spike.core.Log;
import Dictionaries from app.enums.api.Dictionaries;
import DictionariesLoader from app.service.dictionaries.DictionariesLoader;

class CmsDictionaries extends DictionariesLoader {

    @object
    cmsCommentsStatuses: null,

    dictionariesList: {
        cmsCommentsStatuses: Dictionaries.get.cmsCommentsStatuses
    }

}package app.service.dictionaries.loaders;

import Log from spike.core.Log;
import Dictionaries from app.enums.api.Dictionaries;
import DictionariesLoader from app.service.dictionaries.DictionariesLoader;

class GeneralDictionaries extends DictionariesLoader {

  @object
  adminRoles: null,

  @object
  privilegeStatuses: null,

  @object
  queryStatuses: null,

  @object
  betSlipCombinationStatuses: null,

  @object
  betSlipRegMethods: null,

  @object
  eventsTypes: null,

  @object
  transactionsTypes: null,

  @object
  transactionsTypeSwitches: null,

  dictionariesList: {
    adminRoles: Dictionaries.get.adminRoles,
    privilegeStatuses: Dictionaries.get.privilegeStatuses,
    queryStatuses: Dictionaries.get.queryStatuses,
    betSlipCombinationStatuses: Dictionaries.get.betSlipCombinationStatuses,
    betSlipRegMethods: Dictionaries.get.betSlipRegMethods,
    eventsTypes: Dictionaries.get.eventsTypes,
    transactionsTypes: Dictionaries.get.transactionsTypes,
    transactionsTypeSwitches: Dictionaries.get.transactionsTypeSwitches
  }

}package app.service.dictionaries.loaders;

import Log from spike.core.Log;
import Dictionaries from app.enums.api.Dictionaries;
import DictionariesLoader from app.service.dictionaries.DictionariesLoader;

class OffersDictionaries extends DictionariesLoader {

    @object
    offerDefinitionStatuses: null,

    @object
    offerTypes: null,

    @object
    offerAssignConditions: null,

    @object
    offerWithdrawLockTypes: null,

    @object
    offerCachbackCalculationTypes: null,

    @object
    offerCachbackProgressiveCachbackTypes: null,

    dictionariesList: {
        offerDefinitionStatuses: Dictionaries.get.offerDefinitionStatuses,
        offerTypes: Dictionaries.get.offerTypes,
        offerAssignConditions: Dictionaries.get.offerAssignConditions,
        offerWithdrawLockTypes: Dictionaries.get.offerWithdrawLockTypes,
        offerCachbackCalculationTypes: Dictionaries.get.offerCachbackCalculationTypes,
        offerCachbackProgressiveCachbackTypes: Dictionaries.get.offerCachbackProgressiveCachbackTypes,
    }

}